// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @unique
  name                String
  email               String                @unique
  session             Session[]
  Key                 Key[]
  Factor              Factor?
  PasswordResetToken  PasswordResetToken[]
  EmailVerifyToken    EmailVerifyToken[]
  verified            Boolean               @default(false)
  created_at          DateTime              @default(dbgenerated("NOW()"))
  updated_at          DateTime              @default(dbgenerated("NOW()"))

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String    @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at      DateTime  @default(dbgenerated("NOW()"))
  updated_at      DateTime  @default(dbgenerated("NOW()"))

  @@index([user_id])
  @@map("key")
}

model PasswordResetToken {
  id        String    @id @unique @default(cuid())
  token     String    @unique @default(cuid())
  expires   DateTime  @default(dbgenerated("NOW() + interval '1 day'"))
  user_id   String
  user      User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("password_reset_token")
}

model EmailVerifyToken {
  id        String    @id @unique @default(cuid())
  token     String    @unique @default(cuid())
  expires   DateTime  @default(dbgenerated("NOW() + interval '15 minutes'"))
  user_id   String
  user      User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("email_verify_token")
}

model Factor {
  id        String  @id @unique @default(cuid())
  secret    String  @unique
  uri       String
  qr        String
  verified  Boolean @default(false)
  user_id   String  @unique
  user      User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("factor")
}